<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.eclipse.ui.editorActions">
<annotation>
   <appInfo>
      <meta.schema plugin="org.eclipse.ui" id="editorActions" name="Editor Menus, Toolbars and Actions"/>
   </appInfo>
   <documentation>
      This extension point allows tools to add menus, menu items and toolbar buttons to the window 
menu bar and toolbar when a resource editor is active. The difference between adding 
as an editor contribution and as a workbench window contribution
is in visibility. Workbench window menus and toolbars are visible all the time. 
In contrast, editor menus and toolbars appear only
when the editor in question is opened and activated. 
&lt;p&gt;
The initial editor contribution set is defined in another extension point 
(&lt;samp&gt;org.eclipse.ui.editors&lt;/samp&gt;). Only one set is created for all
instances of the same editor type. Additional actions contributed for that editor 
type from this extension point follow the same
mechanism. In order to pass the editor instance to each action delegate the delegate must implement
&lt;samp&gt;com.ibm.itp.ui.api.actions.IEditorActionDelegate&lt;/samp&gt;. This interface extends 
&lt;samp&gt;IActionDelegate&lt;/samp&gt; by adding method
&lt;samp&gt;editorChanged&lt;/samp&gt; for connecting with the currently active editor.
   </documentation>
</annotation>

   <element name="extension">
      <complexType>
         <sequence>
            <element ref="viewContribution" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  a unique extension point identifier
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  an optional extension identifier
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  an optional extension name
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="viewContribution">
      <complexType>
         <choice minOccurs="0" maxOccurs="unbounded">
            <element ref="menu"/>
            <element ref="action"/>
         </choice>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  a unique identifier that can be used to reference this contribution
               </documentation>
            </annotation>
         </attribute>
         <attribute name="targetID" type="string" use="required">
            <annotation>
               <documentation>
                  an ID of a previously registered editor that is the target of this contribution
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="menu">
      <annotation>
         <appInfo>
            <meta.element labelAttribute="label"/>
         </appInfo>
      </annotation>
      <complexType>
         <sequence>
            <element ref="separator" minOccurs="1" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  a unique identifier that can be used to reference this menu
               </documentation>
            </annotation>
         </attribute>
         <attribute name="label" type="string">
            <annotation>
               <documentation>
                  the text label of the new menu. The label should include mnemonic information.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="path" type="string">
            <annotation>
               <documentation>
                  the location of the menu starting from the root of the menu bar. If omitted, the menu 
will be added into the slot &lt;samp&gt;additions&lt;/samp&gt; on the menu bar. Each token in 
the path must refer to an existing menu in the workbench, except the last one,
which represents a named group in the last menu in the path.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="action">
      <annotation>
         <appInfo>
            <meta.element labelAttribute="label"/>
         </appInfo>
      </annotation>
      <complexType>
         <sequence>
            <element ref="selection" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  a unique identifier that can be used as a reference for this action.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="label" type="string" use="required">
            <annotation>
               <documentation>
                  a translatable name that is used in various ways, depending on the context. In menus, it is used 
as the menu text. In toolbars, it is used as the button label. The label can contain JFace-encoded 
mnemonic and accelerator information (see example).
               </documentation>
            </annotation>
         </attribute>
         <attribute name="menubarPath" type="string">
            <annotation>
               <documentation>
                  a slash-delimited path ('/') that is used to specify the location of the action in the menu bar. 
&lt;b&gt;The path may only point to menus that belong to the target editor.&lt;/b&gt; The last token 
represents the named separator group into which the action will be added. If the path is 
omitted, the action will not appear in menu bar.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="toolbarPath" type="string">
            <annotation>
               <documentation>
                  a slash-delimited path ('/') that is used to specify the location of the action in the toolbar. The first token
represents the toolbar ID (with "Normal" being the default toolbar), while the second token is
the named group within the toolbar. If the group does not exist in the toolbar, it will be created. 
If toolbarPath is omitted, the action will not appear.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="icon" type="string">
            <annotation>
               <documentation>
                  a relative path of an icon that will be used to visually represent the action in its context. 
If it is omitted and the action should appear in the toolbar, the workbench will use a place 
holder icon. The path is relative to the location of the plugin.xml file of the contributing plug-in.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="tooltip" type="string">
            <annotation>
               <documentation>
                  used if the action is to appear in the tool bar. Otherwise, it is ignored.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="state" type="boolean">
            <annotation>
               <documentation>
                  an optional attribute indicating that the action should be of a toggle type. When added to a menu, 
it will manifest itself as a check box item. When added to a tool bar, it will become a toggle 
button. If defined, attribute value will be used as initial state (either &lt;samp&gt;true&lt;/samp&gt;
or &lt;samp&gt;false&lt;/samp&gt;)
               </documentation>
            </annotation>
         </attribute>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  the name of the fully qualified class that implements 
&lt;samp&gt;com.ibm.itp.ui.api.actions.IEditorActionDelegate&lt;/samp&gt;
               </documentation>
               <appInfo>
                  <meta.attribute kind="java"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="enablesFor" type="string">
            <annotation>
               <documentation>
                  a value indicating the selection count which must be met to enable the action. 
If this attribute is specified and the condition is met the action is enabled.  
If the condition is not met the action is disabled.  If no attribute is specified the
action is enabled for any number of items selected.  
The following attribute formats are supported: 
&lt;ul&gt;            
          &lt;br&gt;&lt;b&gt;!&lt;/b&gt; - 0 items selected 
          &lt;br&gt;&lt;b&gt;?&lt;/b&gt; - 0 or 1 items selected 
          &lt;br&gt;&lt;b&gt;+&lt;/b&gt; - 1 or more items selected 
          &lt;br&gt;&lt;b&gt;multiple, 2+&lt;/b&gt; - 2 or more items selected 
          &lt;br&gt;&lt;b&gt;n&lt;/b&gt; - a precise number of items selected.  Example: 4. 
          &lt;br&gt;&lt;b&gt;*&lt;/b&gt; - any number of items selected
&lt;/ul&gt;
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="separator">
      <annotation>
         <appInfo>
            <meta.element labelAttribute="name"/>
         </appInfo>
      </annotation>
      <complexType>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  name of the separator that can later be referenced as the last
token in the action path. Therefore, separators serve as
named groups into which actions can be added.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="selection">
      <complexType>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  a fully qualified name of the class or interface that each object in the selection 
must subclass or implement in order to enable the action.
               </documentation>
               <appInfo>
                  <meta.attribute kind="java"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  a wild card filter that can optionally be applied to objects in the selection. If this filter
is specified and the match fails, the action will be disabled.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appInfo>
         <meta.section type="examples"/>
      </appInfo>
      <documentation>
         The following is an example of a view actions extension point
(note the subelements and the way attributes are used):     

&lt;p&gt;
&lt;pre&gt;
   &lt;extension point="org.eclipse.ui.viewActions"&gt; 
      &lt;viewContribution 
         id="com.xyz.xyzViewC1" 
         targetID="com.ibm.itp.ui.views.ResourceNavigator"&gt; 
         &lt;menu id="com.xyz.xyzMenu" path="additions"&gt; 
            &lt;separator name="group1"/&gt; 
         &lt;/menu&gt; 
         &lt;action id="com.xyz.runXYZ" 
              label="&amp;amp;Run XYZ Tool"
              menubarPath="com.xyz.xyzMenu/group1" 
              toolbarPath="Normal/XYZ" 
              icon="icons/runXYZ.gif" 
              tooltip="Run XYZ Tool" 
              class="com.xyz.actions.RunXYZ" 
              enablesFor="1"/&gt; 
              &lt;selection class="com.ibm.itp.core.api.resources.IFile" name="*.java"/&gt;
         &lt;/action&gt; 
   &lt;/extension&gt;
&lt;/pre&gt;   
&lt;p&gt;
In the example above, the specified action will only enable for
a single selection (&lt;samp&gt;enablesFor&lt;/samp&gt; attribute). In addition,
each object in this selection must implement the specified interface
(&lt;samp&gt;IFile&lt;/samp&gt;) and must be a Java file. Multiple selection
elements can be specified, meaning 'one of'.
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="apiInfo"/>
      </appInfo>
      <documentation>
         The value of the class attribute must be a fully qualified name of a Java class that implements
&lt;samp&gt;com.ibm.itp.ui.api.actions.IEditorActionDelegate&lt;/samp&gt;. This interface is 
loaded as late as possible to avoid loading the
entire plug-in before it is really needed. The method &lt;samp&gt;editorChanged&lt;/samp&gt; 
will be called each time an editor of the specified type is
activated. Only one set of actions and menus will be created for all instances 
of the specified editor type, regardless of the number of
editor instances currently opened in the workbench. 
&lt;p&gt;
This extension point can be used to contribute actions into menus previously 
created by the target editor. In addition, menus and
actions can be contributed to the workbench window.  The identifiers for actions 
and major groups within the workbench window
are defined in &lt;samp&gt;org.eclipse.ui.IWorkbenchActionConstants&lt;/samp&gt;. 
&lt;p&gt;
Top level menus are created by using the following values for the path attribute: 
&lt;ul&gt;
     &lt;li&gt;additions - represents a group to the right of the Perspective menu.&lt;/li&gt;
&lt;/ul&gt;
Actions and menus added into these paths will be shown only while the 
associated editor is active. When the editor is closed, menus
and actions will be removed.
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="implementation"/>
      </appInfo>
      <documentation>
         The workbench does not provide built-in content editors. Plug-ins
can contribute into editors provided by other plug-ins.
      </documentation>
   </annotation>

</schema>
