<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.eclipse.ui">
<annotation>
   <appInfo>
      <meta.schema plugin="org.eclipse.ui" id="editorActions" name="Editor Menus and Actions"/>
   </appInfo>
   <documentation>
      This extension point is used to add actions to the menu 
and toolbar for editors registered by other plug-ins. 
&lt;p&gt;
The initial contribution set for an editor is defined 
by another extension point (org.eclipse.ui.editors). 
One set of actions is created and shared by all 
instances of the same editor type.  When invoked, 
these action act upon the active editor.  This 
extension point follows the same pattern.  Each 
action extension is created and shared by all 
instances of the same editor type.  The action 
class is required to implement 
&lt;samp&gt;org.eclipse.ui.IEditorActionDelegate&lt;/samp&gt;.  
The active editor is passed to the delegate by invoking 
&lt;samp&gt;IEditorActionDelegate.setActiveEditor&lt;/samp&gt;.
   </documentation>
</annotation>

   <element name="extension">
      <complexType>
         <sequence>
            <element ref="editorContribution" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  a unique extension point identifier
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  an optional extension identifier
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  an optional extension name
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="editorContribution">
      <complexType>
         <choice minOccurs="0" maxOccurs="unbounded">
            <element ref="menu"/>
            <element ref="action"/>
         </choice>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  a unique identifier that can be used to reference this contribution
               </documentation>
            </annotation>
         </attribute>
         <attribute name="targetID" type="string" use="required">
            <annotation>
               <documentation>
                  an ID of a previously registered editor that is the target of this contribution
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="menu">
      <annotation>
         <appInfo>
            <meta.element labelAttribute="label"/>
         </appInfo>
      </annotation>
      <complexType>
         <sequence>
            <element ref="separator" minOccurs="1" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  a unique identifier that can be used to reference this menu
               </documentation>
            </annotation>
         </attribute>
         <attribute name="label" type="string" use="required">
            <annotation>
               <documentation>
                  the text label of the new menu. The label should include mnemonic information.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="path" type="string">
            <annotation>
               <documentation>
                  the location of the menu starting from the root of the menu bar. If omitted, the menu 
will be added into the slot &lt;samp&gt;additions&lt;/samp&gt; on the menu bar. Each token in 
the path must refer to an existing menu in the workbench, except the last one,
which represents a named group in the last menu in the path.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="action">
      <annotation>
         <appInfo>
            <meta.element labelAttribute="label" icon="icon"/>
         </appInfo>
      </annotation>
      <complexType>
         <sequence>
            <element ref="selection" minOccurs="0" maxOccurs="unbounded"/>
            <element ref="enablement" minOccurs="0" maxOccurs="1"/>
         </sequence>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  a unique identifier that can be used as a reference for this action.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="label" type="string" use="required">
            <annotation>
               <documentation>
                  a translatable name that is used in various ways, depending on the context. In menus, it is used 
as the menu text. In toolbars, it is used as the button label. The label can contain JFace-encoded 
mnemonic and accelerator information (see example).
               </documentation>
            </annotation>
         </attribute>
         <attribute name="menubarPath" type="string">
            <annotation>
               <documentation>
                  a slash-delimited path ('/') that is used to specify the location of the action in the menu bar. 
&lt;b&gt;The path may only point to menus that belong to the target editor.&lt;/b&gt; The last token 
represents the named separator group into which the action will be added. If the path is 
omitted, the action will not appear in menu bar.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="toolbarPath" type="string">
            <annotation>
               <documentation>
                  a slash-delimited path ('/') that is used to specify the location of the action in the toolbar. The first token
represents the toolbar ID (with "Normal" being the default toolbar), while the second token is
the named group within the toolbar. If the group does not exist in the toolbar, it will be created. 
If toolbarPath is omitted, the action will not appear.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="icon" type="string">
            <annotation>
               <documentation>
                  a relative path of an icon that will be used to visually represent the action in its context. 
If it is omitted and the action should appear in the toolbar, the workbench will use a place 
holder icon. The path is relative to the location of the plugin.xml file of the contributing plug-in.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="tooltip" type="string">
            <annotation>
               <documentation>
                  used if the action is to appear in the tool bar. Otherwise, it is ignored.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="state" type="boolean">
            <annotation>
               <documentation>
                  an optional attribute indicating that the action should be of a toggle type. When added to a menu, 
it will manifest itself as a check box item. When added to a tool bar, it will become a toggle 
button. If defined, attribute value will be used as initial state (either &lt;samp&gt;true&lt;/samp&gt;
or &lt;samp&gt;false&lt;/samp&gt;)
               </documentation>
            </annotation>
         </attribute>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  the name of the fully qualified class that implements 
&lt;samp&gt;org.eclipse.ui.IEditorActionDelegate&lt;/samp&gt;
               </documentation>
               <appInfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.ui.IEditorActionDelegate"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="enablesFor" type="string">
            <annotation>
               <documentation>
                  a value indicating the selection count which must be met to enable the action. 
If this attribute is specified and the condition is met the action is enabled.  
If the condition is not met the action is disabled.  If no attribute is specified the
action is enabled for any number of items selected.  
The following attribute formats are supported: 
&lt;ul&gt;            
          &lt;br&gt;&lt;b&gt;!&lt;/b&gt; - 0 items selected 
          &lt;br&gt;&lt;b&gt;?&lt;/b&gt; - 0 or 1 items selected 
          &lt;br&gt;&lt;b&gt;+&lt;/b&gt; - 1 or more items selected 
          &lt;br&gt;&lt;b&gt;multiple, 2+&lt;/b&gt; - 2 or more items selected 
          &lt;br&gt;&lt;b&gt;n&lt;/b&gt; - a precise number of items selected.  Example: 4. 
          &lt;br&gt;&lt;b&gt;*&lt;/b&gt; - any number of items selected
&lt;/ul&gt;
               </documentation>
            </annotation>
         </attribute>
         <attribute name="accelerator" type="string">
            <annotation>
               <documentation>
                  The accelerator for the action.  This is specified as a combination of the keys CTRL, SHIFT and ALT and an accelerator key.
These values are not internationalized and should not be translated.
Specification of the accelerator for the entry title should be done in the label = this value will not be used to build a menu entry.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="disabledIcon" type="string">
            <annotation>
               <documentation>
                  a relative pathof an icon that will be used to visually represent the action in its context when the action is disabled.
If it is omitted, the normal icon will simply appear greyed out.
The path is relative to the location of the plugin.xml file of the contributing plug-in.
               </documentation>
               <appInfo>
                  <meta.attribute kind="resource"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="hoverIcon" type="string">
            <annotation>
               <documentation>
                  a relative path of an icon that will be used to visually represent the action in its context when the mouse is over the action.
If its is omitted, the normal icon will be used.  This path is relative to the location of the plugin.xml file of the contributing plug-in.
               </documentation>
               <appInfo>
                  <meta.attribute kind="resource"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="separator">
      <annotation>
         <appInfo>
            <meta.element labelAttribute="name"/>
         </appInfo>
      </annotation>
      <complexType>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  name of the separator that can later be referenced as the last
token in the action path. Therefore, separators serve as
named groups into which actions can be added.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="selection">
      <complexType>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  a fully qualified name of the class or interface that each object in the selection 
must subclass or implement in order to enable the action.
               </documentation>
               <appInfo>
                  <meta.attribute kind="java"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  a wild card filter that can optionally be applied to objects in the selection. If this filter
is specified and the match fails, the action will be disabled.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="enablement">
      <complexType>
         <choice>
            <element ref="and"/>
            <element ref="or"/>
            <element ref="not"/>
            <element ref="objectClass"/>
            <element ref="objectState"/>
            <element ref="systemProperty"/>
            <element ref="pluginState"/>
         </choice>
      </complexType>
   </element>

   <element name="and">
      <complexType>
         <choice minOccurs="0" maxOccurs="unbounded">
            <element ref="or"/>
            <element ref="not"/>
            <element ref="objectClass"/>
            <element ref="objectState"/>
            <element ref="systemProperty"/>
            <element ref="pluginState"/>
         </choice>
      </complexType>
   </element>

   <element name="or">
      <complexType>
         <choice minOccurs="0" maxOccurs="unbounded">
            <element ref="and"/>
            <element ref="not"/>
            <element ref="objectClass"/>
            <element ref="objectState"/>
            <element ref="systemProperty"/>
            <element ref="pluginState"/>
         </choice>
      </complexType>
   </element>

   <element name="not">
      <complexType>
         <choice>
            <element ref="and"/>
            <element ref="or"/>
            <element ref="objectClass"/>
            <element ref="objectState"/>
            <element ref="systemProperty"/>
            <element ref="pluginState"/>
         </choice>
      </complexType>
   </element>

   <element name="objectClass">
      <complexType>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  a fully qualified name of a class.  The expression is evaluated as true only if the selection implements this class.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="objectState">
      <annotation>
         <appInfo>
            <meta.element labelAttribute="name"/>
         </appInfo>
      </annotation>
      <complexType>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  the name of an object attribute.  Acceptable values for this string reflect the object's type, and should be
publicly declared by the plugin where the object's type is declared.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="value" type="string" use="required">
            <annotation>
               <documentation>
                  the required value of the object attribute.  The acceptable values for the object attribute should be publicly declared.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="systemProperty">
      <annotation>
         <appInfo>
            <meta.element labelAttribute="name"/>
         </appInfo>
      </annotation>
      <complexType>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  the name of the system property.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="value" type="string" use="required">
            <annotation>
               <documentation>
                  the required value of the system property.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="pluginState">
      <complexType>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="value" use="required">
            <annotation>
               <documentation>
                  the required state of the plugin.  Currently two states are supported: installed and activated.
               </documentation>
            </annotation>
            <simpleType>
               <restriction base="string">
                  <enumeration value="installed">
                  </enumeration>
                  <enumeration value="activated">
                  </enumeration>
               </restriction>
            </simpleType>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appInfo>
         <meta.section type="examples"/>
      </appInfo>
      <documentation>
         The following is an example of an editor action extension 
point: 
&lt;p&gt;
&lt;pre&gt;
   &lt;extension point="org.eclipse.ui.editorActions"&gt; 
      &lt;editorContribution 
         id="com.xyz.xyzContribution" 
         targetID="com.ibm.XMLEditor"&gt; 
         &lt;menu id="com.xyz.xyzMenu" label="&amp;amp;XYZ Menu"&gt; 
            &lt;separator name="group1"/&gt; 
         &lt;/menu&gt; 
         &lt;action id="com.xyz.runXYZ" 
              label="&amp;amp;Run XYZ Tool" 
              menubarPath="com.xyz.xyzMenu/group1" 
              toolbarPath="Normal/XYZ" 
              state="true" 
              icon="icons/runXYZ.gif" 
              tooltip="Run XYZ Tool" 
              helpContextId="com.xyz.run_action_context" 
              class="com.xyz.actions.RunXYZ"&gt; 
         &lt;/action&gt; 
      &lt;/editorContribution&gt; 
   &lt;/extension&gt; 
&lt;/pre&gt;
&lt;/p&gt;
In the example above, the specified action will appear 
as a check box item in the menu, and as a toggle 
button in the toolbar.
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="apiInfo"/>
      </appInfo>
      <documentation>
         The value of the class attribute must be a fully qualified
name of a Java class that implements 
&lt;samp&gt;org.eclipse.ui.IEditorActionDelegate&lt;/samp&gt;. 
This interface is loaded as late as possible to 
avoid loading the entire plug-in before it is really 
needed. The method &lt;samp&gt;setActiveEditor&lt;/samp&gt; will be 
called each time an editor of the specified type is 
activated. Only one set of actions and menus will be 
created for all instances of the specified editor 
type, regardless of the number of editor instances 
currently opened in the workbench. 
&lt;p&gt;
This extension point can be used to contribute actions 
into menus previously created by the target editor. 
In addition, menus and actions can be contributed to 
the workbench window.  The identifiers for actions and 
major groups within the workbench window are defined in 
&lt;samp&gt;org.eclipse.ui.IWorkbenchActionConstants&lt;/samp&gt;.  
These should be used as a reference point for 
the addition of new actions.  Top level menus are 
created by using the following values for the 
path attribute: 
&lt;ul&gt;
&lt;li&gt;
additions - represents a group to the left of the Window menu. 
&lt;/li&gt;
&lt;/ul&gt;
Actions and menus added into these paths will only 
be shown while the associated editor is active. When 
the editor is closed, menus and actions will be removed.
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="implementation"/>
      </appInfo>
      <documentation>
         The workbench does not provide built-in content editors. 
Plug-ins can contribute into editors provided by other 
plug-ins.
      </documentation>
   </annotation>

</schema>
