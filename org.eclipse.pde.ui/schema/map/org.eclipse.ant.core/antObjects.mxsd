<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.eclipse.ant.core">
<annotation>
   <appInfo>
      <meta.schema plugin="org.eclipse.ant.core" id="antObjects" name="Ant Objects"/>
   </appInfo>
   <documentation>
      Allows plug-ins to define arbitrary classes for use by 
the Ant infrastructure.  For example, in the case of 
a Javac compiler adapters, the compiler adapter 
factory can be supplied, via a property setting, 
with the name of an adapter class to use.  
Unfortunately, it is unlikely that the Ant Core 
plug-in would have this class on its classpath 
(or that of any of its prerequisites).  To address 
this, clients should define an extension which plugs 
into this extension-point and maps a name onto a class.  
The Ant plug-in can then request that the declaring plug-in 
load the specified class.
   </documentation>
</annotation>

   <element name="extension">
      <complexType>
         <sequence>
            <element ref="antObject" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="antObject">
      <annotation>
         <appInfo>
            <meta.element labelAttribute="name"/>
         </appInfo>
      </annotation>
      <complexType>
         <attribute name="name" type="string" use="required">
            <annotation>
               <documentation>
                  name of the class to be defined
               </documentation>
            </annotation>
         </attribute>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  the fully qualified name of a Java class
               </documentation>
               <appInfo>
                  <meta.attribute kind="java"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appInfo>
         <meta.section type="examples"/>
      </appInfo>
      <documentation>
         The following is an example of an object declaration: 
&lt;p&gt;
&lt;pre&gt;
   &lt;extension point="org.eclipse.ant.core.antObject"&gt;
      &lt;antObject name="com.example.Foo" class="com.example.Foo"/&gt;
   &lt;/extension&gt; 
&lt;/pre&gt;
&lt;/p&gt;
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="apiInfo"/>
      </appInfo>
      <documentation>
         The objects declared via this extension-point are 
accessible though the following API:
&lt;p&gt;
&lt;samp&gt;org.eclipse.core.ant.AntPlugin.getObjectExtensions&lt;/samp&gt;
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="implementation"/>
      </appInfo>
      <documentation>
         The platform itself does not supply any object extension.
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="copyright"/>
      </appInfo>
      <documentation>
         
      </documentation>
   </annotation>

</schema>
